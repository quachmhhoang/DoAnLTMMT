/**
 * Notification Polling System
 * Ki·ªÉm tra th√¥ng b√°o m·ªõi v√† t·ª± ƒë·ªông reload trang khi c·∫ßn thi·∫øt
 */

class NotificationPoller {
    constructor(options = {}) {
        this.pollInterval = options.pollInterval || 30000; // 30 gi√¢y
        this.autoReload = options.autoReload !== false; // M·∫∑c ƒë·ªãnh l√† true
        this.reloadDelay = options.reloadDelay || 3000; // 3 gi√¢y delay tr∆∞·ªõc khi reload
        this.lastCheckTime = new Date().toISOString().slice(0, 19).replace('T', ' ');
        this.isPolling = false;
        this.pollTimer = null;
        this.notificationCount = 0;
        
        // Callbacks
        this.onNewNotification = options.onNewNotification || this.defaultNotificationHandler.bind(this);
        this.onReload = options.onReload || this.defaultReloadHandler.bind(this);
        
        this.init();
    }

    init() {
        // B·∫Øt ƒë·∫ßu polling n·∫øu user ƒë√£ ƒëƒÉng nh·∫≠p
        if (this.isUserLoggedIn()) {
            this.startPolling();
        }

        // L·∫Øng nghe s·ª± ki·ªán visibility change ƒë·ªÉ t·∫°m d·ª´ng/ti·∫øp t·ª•c polling
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                this.pausePolling();
            } else {
                this.resumePolling();
            }
        });

        // Cleanup khi trang ƒë∆∞·ª£c unload
        window.addEventListener('beforeunload', () => {
            this.stopPolling();
        });
    }

    isUserLoggedIn() {
        // Ki·ªÉm tra xem user c√≥ ƒëƒÉng nh·∫≠p kh√¥ng
        return document.body.dataset.userId || 
               document.querySelector('meta[name="user-id"]') ||
               localStorage.getItem('user_id');
    }

    startPolling() {
        if (this.isPolling) return;
        
        this.isPolling = true;
        console.log('üîÑ B·∫Øt ƒë·∫ßu polling th√¥ng b√°o...');
        
        // Ki·ªÉm tra ngay l·∫≠p t·ª©c
        this.checkNotifications();
        
        // Thi·∫øt l·∫≠p interval
        this.pollTimer = setInterval(() => {
            this.checkNotifications();
        }, this.pollInterval);
    }

    pausePolling() {
        if (this.pollTimer) {
            clearInterval(this.pollTimer);
            this.pollTimer = null;
        }
        console.log('‚è∏Ô∏è T·∫°m d·ª´ng polling th√¥ng b√°o');
    }

    resumePolling() {
        if (this.isPolling && !this.pollTimer) {
            this.pollTimer = setInterval(() => {
                this.checkNotifications();
            }, this.pollInterval);
            console.log('‚ñ∂Ô∏è Ti·∫øp t·ª•c polling th√¥ng b√°o');
        }
    }

    stopPolling() {
        this.isPolling = false;
        if (this.pollTimer) {
            clearInterval(this.pollTimer);
            this.pollTimer = null;
        }
        console.log('‚èπÔ∏è D·ª´ng polling th√¥ng b√°o');
    }

    async checkNotifications() {
        try {
            const response = await fetch(`/api/notifications/check-new?last_check=${encodeURIComponent(this.lastCheckTime)}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                credentials: 'same-origin'
            });

            if (!response.ok) {
                if (response.status === 401) {
                    // User kh√¥ng ƒëƒÉng nh·∫≠p, d·ª´ng polling
                    this.stopPolling();
                    return;
                }
                throw new Error(`HTTP ${response.status}`);
            }

            const data = await response.json();
            
            if (data.success) {
                this.lastCheckTime = data.last_check;
                
                if (data.has_new && data.new_notifications.length > 0) {
                    console.log('üîî C√≥ th√¥ng b√°o m·ªõi:', data.new_notifications);
                    
                    // X·ª≠ l√Ω t·ª´ng th√¥ng b√°o m·ªõi
                    data.new_notifications.forEach(notification => {
                        this.onNewNotification(notification);
                    });
                    
                    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
                    this.updateUnreadCount(data.unread_count);
                    
                    // T·ª± ƒë·ªông reload n·∫øu ƒë∆∞·ª£c b·∫≠t
                    if (this.autoReload) {
                        this.scheduleReload();
                    }
                }
            }
        } catch (error) {
            console.error('‚ùå L·ªói khi ki·ªÉm tra th√¥ng b√°o:', error);
            // Kh√¥ng d·ª´ng polling, ch·ªâ log l·ªói
        }
    }

    defaultNotificationHandler(notification) {
        // Hi·ªÉn th·ªã toast notification
        this.showToastNotification(notification);
        
        // C·∫≠p nh·∫≠t badge s·ªë l∆∞·ª£ng th√¥ng b√°o
        this.updateNotificationBadge();
        
        // Ph√°t √¢m thanh th√¥ng b√°o (n·∫øu ƒë∆∞·ª£c ph√©p)
        this.playNotificationSound();
    }

    showToastNotification(notification) {
        // T·∫°o toast notification
        const toast = document.createElement('div');
        toast.className = 'toast notification-toast show';
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            min-width: 350px;
            background: white;
            border-left: 4px solid ${this.getNotificationColor(notification.type)};
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            border-radius: 8px;
            animation: slideInRight 0.3s ease-out;
        `;
        
        toast.innerHTML = `
            <div class="toast-header">
                <i class="fas ${this.getNotificationIcon(notification.type)} me-2" style="color: ${this.getNotificationColor(notification.type)}"></i>
                <strong class="me-auto">${this.escapeHtml(notification.title)}</strong>
                <small class="text-muted">V·ª´a xong</small>
                <button type="button" class="btn-close" onclick="this.parentElement.parentElement.remove()"></button>
            </div>
            <div class="toast-body">
                ${this.escapeHtml(notification.message)}
            </div>
        `;
        
        document.body.appendChild(toast);
        
        // T·ª± ƒë·ªông x√≥a sau 8 gi√¢y
        setTimeout(() => {
            if (toast.parentElement) {
                toast.style.animation = 'slideOutRight 0.3s ease-in';
                setTimeout(() => toast.remove(), 300);
            }
        }, 8000);
    }

    updateUnreadCount(count) {
        // C·∫≠p nh·∫≠t badge s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
        const badges = document.querySelectorAll('.notification-badge, .unread-count');
        badges.forEach(badge => {
            badge.textContent = count;
            badge.style.display = count > 0 ? 'inline' : 'none';
        });
    }

    updateNotificationBadge() {
        this.notificationCount++;
        const badges = document.querySelectorAll('.notification-badge');
        badges.forEach(badge => {
            badge.textContent = this.notificationCount;
            badge.style.display = 'inline';
            badge.classList.add('pulse-animation');
        });
    }

    playNotificationSound() {
        // Ph√°t √¢m thanh th√¥ng b√°o nh·∫π
        try {
            const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvLZiTYIG2m98OScTgwOUarm7blmGgU7k9n1unEiBC13yO/eizEIHWq+8+OWT');
            audio.volume = 0.3;
            audio.play().catch(() => {}); // Ignore errors
        } catch (e) {
            // Ignore audio errors
        }
    }

    scheduleReload() {
        console.log(`üîÑ S·∫Ω reload trang sau ${this.reloadDelay/1000} gi√¢y...`);
        
        // Hi·ªÉn th·ªã th√¥ng b√°o reload
        this.showReloadNotification();
        
        setTimeout(() => {
            this.onReload();
        }, this.reloadDelay);
    }

    showReloadNotification() {
        const notification = document.createElement('div');
        notification.className = 'alert alert-info alert-dismissible fade show reload-notification';
        notification.style.cssText = `
            position: fixed;
            top: 80px;
            right: 20px;
            z-index: 9998;
            min-width: 350px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        `;
        
        notification.innerHTML = `
            <i class="fas fa-sync-alt me-2"></i>
            <strong>C√≥ th√¥ng b√°o m·ªõi!</strong> Trang s·∫Ω ƒë∆∞·ª£c l√†m m·ªõi ƒë·ªÉ hi·ªÉn th·ªã n·ªôi dung m·ªõi nh·∫•t.
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(notification);
    }

    defaultReloadHandler() {
        window.location.reload();
    }

    getNotificationColor(type) {
        const colors = {
            'order': '#28a745',
            'product': '#007bff', 
            'promotion': '#ffc107',
            'system': '#6c757d',
            'admin': '#dc3545'
        };
        return colors[type] || '#6c757d';
    }

    getNotificationIcon(type) {
        const icons = {
            'order': 'fa-shopping-cart',
            'product': 'fa-box',
            'promotion': 'fa-percentage', 
            'system': 'fa-cog',
            'admin': 'fa-user-shield'
        };
        return icons[type] || 'fa-bell';
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// CSS cho animations
const style = document.createElement('style');
style.textContent = `
    @keyframes slideInRight {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes slideOutRight {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
    
    @keyframes pulse-animation {
        0% { transform: scale(1); }
        50% { transform: scale(1.2); }
        100% { transform: scale(1); }
    }
    
    .pulse-animation {
        animation: pulse-animation 0.6s ease-in-out;
    }
`;
document.head.appendChild(style);

// Export cho s·ª≠ d·ª•ng global
window.NotificationPoller = NotificationPoller;
